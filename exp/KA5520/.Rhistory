#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
aux_prob=binomial[aciertos, tiros]
binomial[aciertos, tiros]
View(planilla_cazatalentos)
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
aciertos
View(planilla_cazatalentos)
binomial[3,5]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[3,5]]
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
planilla_cazatalentos[ id_mejor ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
#  planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
planilla_cazatalentos[ id_mejor ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
}
Estrategia_A  <- function()
{
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
#  planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
planilla_cazatalentos[ id_mejor ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
return(veredicto)
}
veredicto  <- Estrategia_A()
#Intento de Solucion del desafio  15k
#Idea: por cada jugador, intento estimar la probabilidad de que el mejor haya tenido esa performance y se la asigno
#uso una tabla de probabilidades para no calcular sucesivamente
#luego hago tirar al que tenga mayor valor de la mencionada probabilidad
#los no buenos, deberian converger hacia 0, sobreviviendo el 0,7
#se inicializa la planilla con 1 en todas las probabilidades para ir descendiendo
#a continuacion se ve que me aparto de la idea para mejorar tiempos de calculo y cumplir con los 20 min, eso esta indicado en cada caso.
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
ftirar  <- function( prob, qty )
{
return(  sum( runif(qty) < prob ) )
}
#creo tabla distribucion binomial
binomial <- data.frame(matrix(ncol = 700, nrow = 600))
for (row_number in seq(1,500,1))
{for (col_number in seq(1,600,1))
{
binomial[row_number, col_number] = dbinom(row_number ,col_number ,prob=0.7)
}
}
binomial
#variables globales que usan las funciones gimnasio_xxxx
GLOBAL_jugadores  <- c()
GLOBAL_tiros_total  <- 0
#Crea el juego
#a cada jugador se le pone un numero de 1 a 100 en la espalda
#debajo de ese numero esta el indice_de_enceste  que NO puede ser visto por el cazatalentos
gimnasio_init  <- function()
{
GLOBAL_jugadores  <<-  sample( c( (501:599 ) / 1000 , 0.7 ) )
GLOBAL_tiros_total  <<- 0
}
#se le pasa un vector con los IDs de los jugadores y la cantidad de tiros a realizar
#devuelve en un vector cuantos aciertos tuvo cada jugador
gimnasio_tirar  <- function(  pids,  pcantidad )
{
GLOBAL_tiros_total  <<-  GLOBAL_tiros_total + length( pids )*pcantidad
res  <- mapply(  ftirar, GLOBAL_jugadores[pids], pcantidad )
return( res )
}
#El cazatalentos decide a que jugador llevarse
#devuelve la cantidad de tiros libres y si le acerto al verdadero_mejor o no
gimnasio_veredicto  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
Estrategia_A  <- function()
{
#En la primer ronda se hace tirar n tiros libres a cada uno de los 100 jugadores ( se gastan nx100 tiros )
#Esto es para tener un punto de partida y reducir el tiempo de procesamiento.
#A partir de alli, la logica es que tire quien tiene mas probabilidad de tener el rendimiento demostrado suponiendo una probabilidad de 0,7
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 ,"aux_prob"=1,"tiros"=0,"aciertos"=0)
ids_juegan  <- 1:100   #los jugadores que participan
planilla_cazatalentos[ ids_juegan,  tiros := 100 ]  #registro en la planilla que tiran 90 tiros
resultado1  <- gimnasio_tirar( ids_juegan, 100)
planilla_cazatalentos[ ids_juegan,  aciertos := resultado1 ]  #registro en la planilla
planilla_cazatalentos[ ids_juegan ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
#a continuacion puse limite a la cantidad de tiros de un jugador individual para evitar el overtime
#lo optimo conceptualmente seria ir tirando un tiro extra, por velocidad de computo hago 15 tiros seguidos
while (max(planilla_cazatalentos$tiros)<700 & GLOBAL_tiros_total<15000)
{
pos_mejor <-  planilla_cazatalentos[ , which.max(aux_prob) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
resultado  <- gimnasio_tirar( id_mejor, 15)
planilla_cazatalentos[ id_mejor ,aciertos := aciertos+resultado]
planilla_cazatalentos[ id_mejor ,tiros:=tiros+15]
#  planilla_cazatalentos[ id_mejor ,aux_prob:=binomial[aciertos, tiros]]
planilla_cazatalentos[ id_mejor ,aux_prob:=dbinom(aciertos,size=tiros,prob=0.7)]
}
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
veredicto  <- gimnasio_veredicto( id_mejor )
#veredicto
#id_mejor
#max(GLOBAL_jugadores)
#which.max(GLOBAL_jugadores)
return(veredicto)
}
#Aqui hago la Estimacion Montecarlo del porcentaje de aciertos que tiene la estrategia A
set.seed( 102191 )
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10)
{
#  if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- Estrategia_A()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max( tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean( acierto) ]
tiros_total
tasa_eleccion_correcta
# LightGBM  Motivacional
# para motivar a los alumnos a hacer la  "Tarea Hogar DOS"
# viendo que desde el inicio de la tarea logran ganancias superadoras
# la salida queda en  "./labo/exp/KA552/KA_552_001.csv"
#los DOS puntos novedosos que se ven en este script
# 1. Se entrena  con  POS = { BAJA+1, BAJA+2 }    los BAJA+1 en realidad estan mas enfermos que los BAJA+2
#    Era forzar mucho al algoritmo agrupar los BAJA¿1 con los CONTINUA
# 2. El punto anterior obliga a buscar una probabilidad de corte DISTINTA  a 1/60
# utilizar la primer semilla propia
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("lightgbm")
ksemilla  <- 104233  #poner aqui la PRIMERA de sus cinco semillas
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\juanp\\OneDrive\\Escritorio\\ECD\\MD")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar
dataset  <- fread("./datasets/paquete_premium_202011b.csv", stringsAsFactors= TRUE)
#paso la clase a binaria que tome valores {0,1}  enteros
#set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
#esta estrategia es MUY importante
dataset[ , clase01 := ifelse( clase_ternaria %in%  c("BAJA+2","BAJA+1"), 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#genero el modelo con los parametros por default
#estos hiperparametros  salieron de una Optmizacion Bayesiana
modelo  <- lgb.train( data= dtrain,
param= list( objective=        "binary",
max_bin=              31,
learning_rate=         0.067,
num_iterations=      128,
num_leaves=          100,
min_data_in_leaf=   1700,
feature_fraction=      0.37,
seed=               ksemilla   #aqui se utiliza SU primer semilla
)
)
#aplico el modelo a los datos sin clase
dapply  <- fread("./datasets/paquete_premium_202101b.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo,
data.matrix( dapply[, campos_buenos, with=FALSE ])                                 )
#Genero la entrega para Kaggle
#Atencion ya NO corto por  1/60,  sino que busque el punto de corte optimo
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.integer(prediccion > 0.023)   ) ) #ATENCION  no es  1/60
#guardo el resultado
#creo las carpetas
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA5520/", showWarnings = FALSE )
setwd( "./labo/exp/KA5520/" )
archivo_salida  <- "KA_552_001.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep= "," )
#ahora imprimo la importancia de variables
tb_importancia  <-  as.data.table( lgb.importance(modelo) )
archivo_importancia  <- "552_importancia_001.txt"
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
#cuento cuantos 1's tiene la prediccion
#cuantos estimulos estoy enviando para retener clientes
entrega[  , sum( Predicted ) ]
#Arbol elemental con libreria  rpart
#Debe tener instaladas las librerias  data.table  ,  rpart   y rpart.plot
#cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui se debe poner la carpeta de SU computadora local
setwd("C:\\Users\\juanp\\OneDrive\\Escritorio\\ECD\\MD")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  21,     #minima cantidad de registros para que se haga el split
minbucket=  5,     #tamaño minimo de una hoja
maxdepth=   9 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
#dir.create( "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp" )
#dir.create( "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp/KA2001" )
fwrite( entrega,
file= "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp/KA2001/K101_020.csv",
sep= "," )
#Arbol elemental con libreria  rpart
#Debe tener instaladas las librerias  data.table  ,  rpart   y rpart.plot
#cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui se debe poner la carpeta de SU computadora local
setwd("C:\\Users\\juanp\\OneDrive\\Escritorio\\ECD\\MD")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  200,     #minima cantidad de registros para que se haga el split
minbucket=  100,     #tamaño minimo de una hoja
maxdepth=   5 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
#dir.create( "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp" )
#dir.create( "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp/KA2001" )
fwrite( entrega,
file= "C:/Users/juanp/OneDrive/Escritorio/ECD/MD/labo/exp/KA2001/K101_020.csv",
sep= "," )
# LightGBM  Motivacional
# para motivar a los alumnos a hacer la  "Tarea Hogar DOS"
# viendo que desde el inicio de la tarea logran ganancias superadoras
# la salida queda en  "./labo/exp/KA552/KA_552_001.csv"
#los DOS puntos novedosos que se ven en este script
# 1. Se entrena  con  POS = { BAJA+1, BAJA+2 }    los BAJA+1 en realidad estan mas enfermos que los BAJA+2
#    Era forzar mucho al algoritmo agrupar los BAJA¿1 con los CONTINUA
# 2. El punto anterior obliga a buscar una probabilidad de corte DISTINTA  a 1/60
# utilizar la primer semilla propia
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("lightgbm")
ksemilla  <- 104233  #poner aqui la PRIMERA de sus cinco semillas
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\juanp\\OneDrive\\Escritorio\\ECD\\MD")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar
dataset  <- fread("./datasets/paquete_premium_202011b.csv", stringsAsFactors= TRUE)
#paso la clase a binaria que tome valores {0,1}  enteros
#set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
#esta estrategia es MUY importante
dataset[ , clase01 := ifelse( clase_ternaria %in%  c("BAJA+2","BAJA+1"), 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#genero el modelo con los parametros por default
#estos hiperparametros  salieron de una Optmizacion Bayesiana
modelo  <- lgb.train( data= dtrain,
param= list( objective=        "binary",
max_bin=              31,
learning_rate=         0.067,
num_iterations=      128,
num_leaves=          100,
min_data_in_leaf=   1700,
feature_fraction=      0.37,
seed=               ksemilla   #aqui se utiliza SU primer semilla
)
)
#aplico el modelo a los datos sin clase
dapply  <- fread("./datasets/paquete_premium_202101b.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo,
data.matrix( dapply[, campos_buenos, with=FALSE ])                                 )
#Genero la entrega para Kaggle
#Atencion ya NO corto por  1/60,  sino que busque el punto de corte optimo
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.integer(prediccion > 0.023)   ) ) #ATENCION  no es  1/60
#guardo el resultado
#creo las carpetas
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA5520/", showWarnings = FALSE )
setwd( "./labo/exp/KA5520/" )
archivo_salida  <- "KA_552_001.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep= "," )
#ahora imprimo la importancia de variables
tb_importancia  <-  as.data.table( lgb.importance(modelo) )
archivo_importancia  <- "552_importancia_001.txt"
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
#cuento cuantos 1's tiene la prediccion
#cuantos estimulos estoy enviando para retener clientes
entrega[  , sum( Predicted ) ]
View(dataset)
View(dataset)
View(dataset)
View(dataset)
campos_buenos
